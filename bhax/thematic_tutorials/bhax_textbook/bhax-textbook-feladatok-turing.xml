<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: 0 % :<link xlink:href="https://github.com/Davaronas/DE-PTI-Prog1/blob/master/0percent.c">https://github.com/Davaronas/DE-PTI-Prog1/blob/master/0percent.c</link> 
            100 % egy szálra : <link xlink:href="https://github.com/Davaronas/DE-PTI-Prog1/blob/master/100PercentOneThread.c">https://github.com/Davaronas/DE-PTI-Prog1/blob/master/100PercentOneThread.c</link>              
            100 % az összes szálra: <link xlink:href="https://github.com/Davaronas/DE-PTI-Prog1/blob/master/100PercentAllThreads.c">https://github.com/Davaronas/DE-PTI-Prog1/blob/master/100PercentAllThreads.c</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat: Több lehetőség is van végtelen ciklust elérni, én a while(1) -et használtam, aztán a 0 %-osnál üresen hagytam ami azt eredményezi hogy nem kerül erőforrásba futtatni
            , az egy szálasnál a sleep() parancsot használtam, a fork() parancs pedig az összes szálat 100 %-on fogja felhasználni.
        </para>            
    </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne vlgtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat: Ha meg tudnánk mondani melyik program fagy le, akkor alapból nem irnánk olyan programot ami lefagy. A nem lefagyó programból lefagyót készíteni pedig nincs sok értelme,
            a lefagyóbol pedig nem lehet nem lefagyót készíteni ilyen módon
        </para>
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
        <para>
            Megoldás forrása:  <link xlink:href="https://github.com/Davaronas/DE-PTI-Prog1/blob/master/VariableSwitch.c">https://github.com/Davaronas/DE-PTI-Prog1/blob/master/VariableSwitch.c</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat: Három egyszerű paranccsal meg lehet oldani a feladatot, segédváltozó bevezetése nélkül, ami a forráskódban látható. Többféle módszer is van rá, de
            én azt választottam hogy az elsőböl kivonjuk a másodikat, aztán a másodikhoz hozzádjuk a módosított első számot, ezután az a módosított második
            számból az módosított elsőt, ez lesz a második szám eredménye, és ki is cseréltük őket.
        </para>
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/Davaronas/DE-PTI-Prog1/blob/master/Ball.c">https://github.com/Davaronas/DE-PTI-Prog1/blob/master/Ball.c</link>  
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat: Fontos az ablak meghatározása, mivel ezt használja fel a program hogy irányváltoztasson amit úgy
            érünk hogy -1-el megszorozzuk a haladás irányát a megfelelő tengelyeken. A for()-t úgy is ki lehet csinálni, hogy while()-t használunk, és amint egyszer elvégzi a feladatot, break-elünk 
            és így ugyanazt érjük el.
        </para>
    </section>                     

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/Davaronas/DE-PTI-Prog1/blob/master/Bogomips.c">https://github.com/Davaronas/DE-PTI-Prog1/blob/master/Bogomips.c</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat: A Linux kernel használ ilyet és a program a processzor sebességét méri.
        </para>
    </section>                     

    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/Davaronas/DE-PTI-Prog1/blob/master/PageRank.c">https://github.com/Davaronas/DE-PTI-Prog1/blob/master/PageRank.c</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat: A program a Page-Rank értéket számolja ki, amit a google használ hogy a legjobb értékelésű lapokat hozza be a keresésekre
            a felhasználó által. Amelyik lapnak jobb az értékelése, annak nagyobb prioriotást ad, és feljebb kerül a sorban. Ezért van az hogy nem véletlenszerűen dobál oldalakat,
            hanem a hivatalos, eredeti oldalak jönnek ki hamarabb, mint a hamis, vagy nem teljesen a keresett témáról szólóak.
        </para>
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/Davaronas/DE-PTI-Prog1/blob/master/Brun.r">https://github.com/Davaronas/DE-PTI-Prog1/blob/master/Brun.r</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat: A program az ikerprímekkel foglalkozik, ami még mindig vitatott hogy végtelen van e belőlük vagy sem. Azt jelenti, hogy egy prímszámból kivonjuk az mögötte lévő kisebb prímet, és kettő jön ki.
            Aztán a két halmazok(az egymásból kivont prímek) reciprokát összeadjuk. Így olyan számokat kapunk amik közelítenek egy számhoz(körülbelül 1,8) de soha nem érik el.
        </para>
    </section>
    
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/Davaronas/DE-PTI-Prog1/blob/master/MontyHall.r">https://github.com/Davaronas/DE-PTI-Prog1/blob/master/MontyHall.r</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat:Az R instalálása nagyon egyszerű Linuxon, be kell írni 
            consoleba hogy R, aztán leirja hogyan kell telepíteni. A matlabot is instalálltam, ezt követően
            készen álltam a feladat megoldására. Először nem hoztam létre az stp funkciót, ezért problémába ütköztem,
            aztán hosszasabb elemzés után rájöttem hogy azért nem tud a FUN egyenlő lenni az stp-vel mivel az nem létezik, azaz nem hoztam létre.
            Miután ez megtörtént, probléma nélkül csodálhattam meg az elkészített grafikont.
        </para>
    </section>

</chapter>                
